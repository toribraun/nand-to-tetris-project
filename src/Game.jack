class Game {
    field Car car;
    field int opponentCarsCount;
    field Array opponentCars;

    field int tracksCount;
    field boolean rightTrack;
    field int carWidth, carHeight;
    field int delayTime, delayTimeStep;

    field int score;

    field Drawer drawer;

    constructor Game new() {
        let carWidth = 2;
        let carHeight = 3;
        let car = Car.new(carWidth, carHeight, 14, 12);
        let opponentCarsCount = 2;
        let opponentCars = Array.new(opponentCarsCount);
        do FillOpponentCars();
        let tracksCount = 2;
        let rightTrack = true;
        let delayTime = 150;
        let delayTimeStep = 25;
        let score = 0;

        let drawer = Drawer.new();

        return this;
    }

    method void FillOpponentCars() {
        var int i;
        let i = 0;
        while (i < opponentCarsCount) {
            if (rightTrack) {
                let opponentCars[i] = OpponentCar.new(carWidth, carHeight, 32 / 2 - carWidth, getSpawnY() * i);
            } else {
                let opponentCars[i] = OpponentCar.new(carWidth, carHeight, 32 / 2, getSpawnY() * i);
            }
            let i = i + 1;
            let rightTrack = ~rightTrack;
        }
        return;
    }

    method void run() {
        var boolean exit;
        var int key;

        let exit = false;
        do Draw();
        while(~exit) {
            let key = Keyboard.keyPressed();
            if( key = 81 ) {  // q
                let exit = true;
            }
            if( key = 130 ) {  // left arrow
                do car.ChangeTrackLeft();
            }
            if( key = 132 ) {  // right arrow
                do car.ChangeTrackRight(tracksCount);
            }
            if( key = 131 ) {  // up arrow
                do SpeedUp();
            }
            if( key = 133 ) {  // down arrow
                do SpeedDown();
            }

            if( CheckCollision() ) {
                do drawer.DrawGameOver(score);
                return;
            } 

            do MoveOpponentCars();
            do Draw();
            do Sys.wait(delayTime);
        }

        do drawer.DrawExit();
        do Sys.halt();

        return;
    }

    method void MoveOpponentCars() {
        var int i;
        var OpponentCar currentCar;
        let i = 0;
        while (i < opponentCarsCount) {
            let currentCar = opponentCars[i];
            if (~currentCar.TryMove()) {
                do ScoreUp();
                do currentCar.dispose();
                if (rightTrack) {
                    let opponentCars[i] = OpponentCar.new(carWidth, carHeight, 16, getSpawnY());
                } else {
                    let opponentCars[i] = OpponentCar.new(carWidth, carHeight, 14, getSpawnY());
                }
                let rightTrack = ~rightTrack;
            }
            let i = i + 1;
        }

        return;
    }

    method int getSpawnY() {
        return -(16 / 2 + carWidth);
    }

    method boolean CheckCollision() {
        var int i;
        let i = 0;
        while (i < opponentCarsCount) {
            if (car.CheckCollision(opponentCars[i])) {
                return true;
            }
            let i = i + 1;
        }
        return false;
    }

    method void ScoreUp() {
        let score = score + 1;        
        return;
    }

    method void SpeedUp() {
        if ((delayTime - delayTimeStep) > 25) {
            let delayTime = delayTime - delayTimeStep;
        }
        return;
    }

    method void SpeedDown() {
        if ((delayTime + delayTimeStep) < 275) {
            let delayTime = delayTime + delayTimeStep;
        }
        return;
    }

    method void Draw() {
        var int i;
        let i = 0;

        do Screen.clearScreen();
        do drawer.DrawBorders(carWidth, tracksCount);
        do drawer.PrintScore(score);
        do drawer.PrintSpeed(2500 / delayTime);
        do drawer.DrawCar(car);

        while (i < opponentCarsCount) {
            do drawer.DrawOpponentCar(opponentCars[i]);
            let i = i + 1;
        }

        return;
    }

    method void dispose() {
        var int i;
        var OpponentCar currentCar;
        let i = 0;
        while (i < opponentCarsCount) {
            let currentCar = opponentCars[i];
            do currentCar.dispose();
            let i = i + 1;
        }
        do opponentCars.dispose();
        do drawer.dispose();
        do car.dispose();
		do Memory.deAlloc(this);
		return;
	}
}
